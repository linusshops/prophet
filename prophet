#!/usr/bin/env php
<?php
/**
 * Magento Module test harness
 *
 * @author Sam Schmidt
 * @date 2015-04-17
 * @company Linus Shops
 */

if (!ini_get('date.timezone')) {
    ini_set('date.timezone', 'UTC');
}

$composerPaths = array(
    __DIR__ . '/../../autoload.php',
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/vendor/autoload.php'
);

foreach ($composerPaths as $file) {
    if (file_exists($file)) {
        define('PROPHET_COMPOSER_INSTALL', $file);
        break;
    }
}

unset($file);

if (!defined('PROPHET_COMPOSER_INSTALL')) {
    fwrite(
        STDERR,
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'wget http://getcomposer.org/composer.phar' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
    die(1);
}

require PROPHET_COMPOSER_INSTALL;

//Define the commands
$command = new Commando\Command();

$command->setHelp("
Prophet is a testing harness for Magento modules. Its objective is to provide
a testing system that does not require you to modify your Magento installation
besides defining tests and Prophet configs.

Prophet operates off of a command.json file in your Magento root. This file tells
it where to find the modules to run tests on.
");

$command->option('i')
    ->aka('init')
    ->describedAs(
        'Instead of running tests, check all modules from command.json. If '.
        'they do not contain the expected structure, create the missing '.
        'components. This will create a tests directory and a phpunit.xml.'
    )
    ->boolean();

$command->option('c')
    ->aka('config')
    ->describedAs(
        'Specify a prophet.json to use. If none specified, tries to find'.
        'one in the current directory'
    )
    ->default('./prophet.json');

$prophet = new LinusShops\Prophet\Prophet();

if (!file_exists($command['config']) === false) {
    die("Failed to parse prophet.json: file not found.".PHP_EOL);
}

$json = json_decode(file_get_contents($command['config']));
if ($json === false) {
    die("Failed to parse prophet.json: invalid json.".PHP_EOL);
}
$prophet->loadConfig($json);
